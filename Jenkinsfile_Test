@Library('cm_shared_library') _
pipeline {
    agent {
        label 'CarMakerServer' // Label for Windows agent
    }
    environment {
        TEMPLATE_FOLDER_PATH = "${WORKSPACE}\\Data\\TestRun\\Lenkwinkelrampe_Template"
        TEMPLATE_FILE = "${WORKSPACE}\\Template.ts"
        DESTINATION_FOLDER = "${WORKSPACE}\\Data\\TestRun"
        VEHICLE_FOLDER_PATH = "${WORKSPACE}\\Data\\Vehicle"
        OUTPUT_FOLDER = "${WORKSPACE}\\SimOutput\\ENGPMAKNB022"
        LOG_FOLDER = "${WORKSPACE}\\SimOutput\\ENGPMAKNB022\\Log"
        VFF_FOLDER_PATH = "${WORKSPACE}\\Data\\Vehicle"
        DAT_FOLDER_PATH = "${WORKSPACE}\\SimOutput\\ENGPMAKNB022\\log"
        EXCEL_FOLDER_PATH = "${WORKSPACE}\\VehicleInfoExcel"
        BATCH_SCRIPT_PATH = "${WORKSPACE}\\carmakerTestseries.bat"
        TEST_SERIES_FOLDER_PATH = "${WORKSPACE}\\Data\\TestRun"
        FORMAT_FILE_CONFIG_PATH = "${WORKSPACE}\\Data\\Config\\Lenkwinkelrampe_Temp"
    }

    stages {
        
        stage('dat file generation') {
            steps {
                script {
                    // Call the Python script for dat file generation
                    //bat "python carmakerdatfilegenerator.py"
                    //stepCarMakerDatFileGenerator()
                    echo "This is an echo message."
                }
            }
        }

        stage('excel file generator') {
            steps {
                script {
                    // Call the Python script for excel file generation
                    //bat "python autoexcelfilegenerator.py"
                    //stepAutoExcelFileGenerator()
                    echo "This is an echo message."
                }
            }
        }

        stage('test series generator') {
            steps {
                script {
                    // Call the Python script for test series generation
                    //bat "python testseriesgenerator.py"
                    def fileName = 'Template.ts'
                    def sourcePath = 'template/Template.ts'
                    def targetPath = "${WORKSPACE}" // Use Jenkins workspace as target
                    
                    // Call the copyFile function to copy the file
                    //stepCopyFile(fileName, sourcePath, targetPath)

                    //stepTestSeriesGenerator()
                    echo "This is an echo message."
                }
            }
        }
        
        stage('wait') {
            steps {
                script {
                    bat "ping 127.0.0.1 -n 3 > nul"
                }
            }
        }

        stage('create folder') {
            steps {
                script {
                    def destPath = "${env.WORKSPACE}"
                    def dataDestPath = "${env.WORKSPACE}\\Data"

                    // Extract the directory name from the WORKSPACE path
                    def workspacePath = env.WORKSPACE
                    def directoryName = getDirectoryName(workspacePath)
                    
                    // Define the target directory path within the workspace
                    def targetDir = "${workspacePath}\\${directoryName}"
                    
                    // Create the directory using 'bat' command
                    bat "mkdir \"${targetDir}\""
                    
                    // Print a message indicating directory creation
                    echo "Successfully created directory: ${targetDir}"
                    // Define the source paths and destination path
                    def sourcePathsOne = [
                        "${WORKSPACE}\\Data\\TestRun",
                        "${WORKSPACE}\\Data\\Chasis",
                        "${WORKSPACE}\\Data\\Tire",
                        "${WORKSPACE}\\Data\\Vehicle"
                    ]
                   
                    // Define the source paths and destination path
                    def sourcePathsTwo = [
                        "${WORKSPACE}\\Movie"
                    ]

                    stepCopyFolder(sourcePathsOne, dataDestPath)
                    stepCopyFolder(sourcePathsTwo, destPath)

                }
            }
        }
    }
}
